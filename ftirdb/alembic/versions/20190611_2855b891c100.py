"""init

Revision ID: 2855b891c100
Revises: 
Create Date: 2019-06-11 21:07:21.781829

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '2855b891c100'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('FTIRModel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('data', sa.Text(), nullable=False),
    sa.Column('magic', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_FTIRModel')),
    sa.UniqueConstraint('name', name=op.f('uq_FTIRModel_name'))
    )
    op.create_table('Graph_experiment',
    sa.Column('spectra_id', sa.Integer(), nullable=False),
    sa.Column('a', sa.Integer(), nullable=False),
    sa.Column('b', sa.Integer(), nullable=False),
    sa.Column('c', sa.Integer(), nullable=False),
    sa.Column('d', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('spectra_id', name=op.f('pk_Graph_experiment'))
    )
    op.create_table('Spectra',
    sa.Column('spectra_id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(length=32), nullable=False),
    sa.Column('time', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('spectra_id', name=op.f('pk_Spectra')),
    sa.UniqueConstraint('label', name=op.f('uq_Spectra_label'))
    )
    op.create_table('Spectra_detail',
    sa.Column('spectra_id', sa.Integer(), nullable=False),
    sa.Column('index', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('spectra_id', name=op.f('pk_Spectra_detail')),
    sa.UniqueConstraint('index', name=op.f('uq_Spectra_detail_index'))
    )
    op.create_table('atr',
    sa.Column('spectrometer_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('prism_size_mm', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('number_of_reflections', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('prism_material', sa.Enum('Diamond', 'Ge', 'Si', 'KRS-5', 'ZnS', 'ZnSe'), server_default=sa.text("'Diamond'"), nullable=True),
    sa.Column('angle_of_incidence_degrees', mysql.INTEGER(display_width=11), nullable=True),
    sa.PrimaryKeyConstraint('spectrometer_ID', name=op.f('pk_atr'))
    )
    op.create_table('depositor',
    sa.Column('depositor_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('depositor_name', sa.String(length=45), nullable=False),
    sa.Column('institution', sa.String(length=45), nullable=True),
    sa.Column('country', sa.String(length=45), nullable=True),
    sa.Column('principle_investigator', sa.String(length=45), nullable=True),
    sa.Column('deposition_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('depositor_ID', name=op.f('pk_depositor')),
    sa.UniqueConstraint('depositor_ID', name=op.f('uq_depositor_depositor_ID'))
    )
    op.create_table('fourier_transform_processing',
    sa.Column('experiment_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('apodization_ function', sa.Enum('Blackman-Harris 3-Term', 'Blackman-Harris 5-Term', 'Norton-Beer,weak', 'Norton-Beer,medium', 'Norton-Beer,strong', 'Boxcar', 'Triangular', 'Four point', 'other'), nullable=True),
    sa.Column('zero_filling_factor', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('non_linearity_correction', sa.Enum('yes', 'no'), nullable=True),
    sa.Column('phase_correction_mode', sa.Enum('Mertz', 'Mertz signed', 'Power spectrum', 'Mertz no peak search', 'Mertz signed no peak search', 'Power spectrum no peak search'), nullable=True),
    sa.Column('phase_resolution', mysql.INTEGER(display_width=11), nullable=True),
    sa.PrimaryKeyConstraint('experiment_ID', name=op.f('pk_fourier_transform_processing'))
    )
    op.create_table('liquid',
    sa.Column('solution_composition', sa.String(length=100), nullable=False),
    sa.Column('pH', sa.String(length=45), nullable=True),
    sa.Column('concentration', sa.String(length=45), nullable=True),
    sa.Column('solvent', sa.String(length=45), nullable=True),
    sa.Column('atmosphere', sa.String(length=45), nullable=True),
    sa.Column('sample_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.PrimaryKeyConstraint('sample_ID', name=op.f('pk_liquid'))
    )
    op.create_table('molecular_composition',
    sa.Column('molecular_composition_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('molecular_composition_description', sa.String(length=45), nullable=True),
    sa.PrimaryKeyConstraint('molecular_composition_ID', name=op.f('pk_molecular_composition'))
    )
    op.create_table('molecule',
    sa.Column('molecule_name', sa.String(length=45), nullable=False),
    sa.Column('molecule_type', sa.Enum('protein', 'chemical'), nullable=True),
    sa.Column('molecule_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.PrimaryKeyConstraint('molecule_ID', name=op.f('pk_molecule'))
    )
    op.create_table('not_atr',
    sa.Column('spectrometer_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('sample_window_material', sa.Enum('CaF2', 'BaF2', 'ZnSe', 'ZnS', 'CdTe', 'KBr', 'KRS-5', 'other'), server_default=sa.text("'CaF2'"), nullable=True),
    sa.Column('pathlength (if known)', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('multi-well_plate', sa.Enum('y', 'n'), nullable=True),
    sa.Column('if yes - product code', sa.String(length=45), nullable=True),
    sa.PrimaryKeyConstraint('spectrometer_ID', name=op.f('pk_not_atr'))
    )
    op.create_table('project',
    sa.Column('descriptive_name', sa.String(length=300), nullable=True),
    sa.Column('project_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('related_experiments_ID', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('project_ID', name=op.f('pk_project')),
    sa.UniqueConstraint('project_ID', name=op.f('uq_project_project_ID'))
    )
    op.create_table('publication',
    sa.Column('publication_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('publication_name', sa.String(length=45), nullable=False),
    sa.Column('author(s)', sa.String(length=100), nullable=False),
    sa.Column('link', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('publication_ID', name=op.f('pk_publication'))
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('role', sa.Text(), nullable=False),
    sa.Column('password_hash', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('name', name=op.f('uq_users_name'))
    )
    op.create_table('chemicals',
    sa.Column('chemical_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('CAS', sa.String(length=45), nullable=True),
    sa.Column('smiles/inchi/mol2', sa.String(length=45), nullable=True),
    sa.Column('chemical formula', sa.String(length=45), nullable=True),
    sa.Column('molecule_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['molecule_ID'], ['molecule.molecule_ID'], name=op.f('fk_chemicals_molecule_ID_molecule')),
    sa.PrimaryKeyConstraint('chemical_ID', 'molecule_ID', name=op.f('pk_chemicals'))
    )
    op.create_index(op.f('ix_chemicals_molecule_ID'), 'chemicals', ['molecule_ID'], unique=False)
    op.create_table('data_aquisition',
    sa.Column('experiment_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('number_of_sample_scans', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('number_of_background_scans', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('scanner_velocity_KHz', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('resolution', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('start_frequency', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('end_frequency', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('optical_filter', sa.Enum('yes', 'no'), nullable=True),
    sa.Column('higher_range_(cm-1)', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('lower_range_(cm-1)', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('Fourier transform processing_FTIRDBID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['Fourier transform processing_FTIRDBID'], ['fourier_transform_processing.experiment_ID'], name=op.f('fk_data_aquisition_Fourier transform processing_FTIRDBID_fourier_transform_processing')),
    sa.PrimaryKeyConstraint('experiment_ID', name=op.f('pk_data_aquisition'))
    )
    op.create_index(op.f('ix_data_aquisition_Fourier transform processing_FTIRDBID'), 'data_aquisition', ['Fourier transform processing_FTIRDBID'], unique=False)
    op.create_table('molecule_has_molecular_composition',
    sa.Column('molecular_composition_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('molecule_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['molecular_composition_ID'], ['molecular_composition.molecular_composition_ID'], name=op.f('fk_molecule_has_molecular_composition_molecular_composition_ID_molecular_composition')),
    sa.ForeignKeyConstraint(['molecule_ID'], ['molecule.molecule_ID'], name=op.f('fk_molecule_has_molecular_composition_molecule_ID_molecule')),
    sa.PrimaryKeyConstraint('molecular_composition_ID', name=op.f('pk_molecule_has_molecular_composition'))
    )
    op.create_index(op.f('ix_molecule_has_molecular_composition_molecule_ID'), 'molecule_has_molecular_composition', ['molecule_ID'], unique=False)
    op.create_table('protein',
    sa.Column('protein_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('protein_common_name', sa.String(length=45), nullable=True),
    sa.Column('alternative_names', sa.String(length=45), nullable=True),
    sa.Column('source_organism', sa.String(length=45), nullable=True),
    sa.Column('uniprot_ID', sa.String(length=45), nullable=True),
    sa.Column('sequence (use biopython)', sa.String(length=45), nullable=True),
    sa.Column('source (publications)', sa.String(length=45), nullable=True),
    sa.Column('expression_system_or_natural_source', sa.String(length=45), nullable=True),
    sa.Column('expressed_as', sa.String(length=45), nullable=True),
    sa.Column('post_translational_modifications', sa.String(length=100), nullable=True),
    sa.Column('mutation_details', sa.String(length=100), nullable=True),
    sa.Column('expression_tags', sa.String(length=100), nullable=True),
    sa.Column('isotopically_labelled', sa.Enum('y', 'n'), nullable=True),
    sa.Column('description_of_labels', sa.String(length=100), nullable=True),
    sa.Column('ligands_present', sa.Enum('y', 'n'), nullable=True),
    sa.Column('concentration_or_ratio', sa.String(length=100), nullable=True),
    sa.Column('molecule_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['molecule_ID'], ['molecule.molecule_ID'], name=op.f('fk_protein_molecule_ID_molecule')),
    sa.PrimaryKeyConstraint('protein_ID', 'molecule_ID', name=op.f('pk_protein'))
    )
    op.create_index(op.f('ix_protein_molecule_ID'), 'protein', ['molecule_ID'], unique=False)
    op.create_table('sample',
    sa.Column('sample_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('descriptive_name', sa.String(length=45), nullable=True),
    sa.Column('composition', sa.String(length=45), nullable=True),
    sa.Column('molecular_composition_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['molecular_composition_ID'], ['molecular_composition.molecular_composition_ID'], name=op.f('fk_sample_molecular_composition_ID_molecular_composition')),
    sa.PrimaryKeyConstraint('sample_ID', name=op.f('pk_sample'))
    )
    op.create_index(op.f('ix_sample_molecular_composition_ID'), 'sample', ['molecular_composition_ID'], unique=False)
    op.create_table('spectrometer',
    sa.Column('spectrometer_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('instrument_manufacturer', sa.String(length=45), nullable=True),
    sa.Column('instrument_model', sa.String(length=45), nullable=True),
    sa.Column('light_source', sa.Enum('globar', 'laser', 'synchrotron', 'other'), server_default=sa.text("'globar'"), nullable=True),
    sa.Column('beamsplitter', sa.Enum('KBr', 'Mylar'), server_default=sa.text("'KBr'"), nullable=True),
    sa.Column('detector_ type', sa.Enum('DTGS', 'MCT Broad band', 'MCT narrow band', 'other'), server_default=sa.text("'DTGS'"), nullable=True),
    sa.Column('optics', sa.Enum('vacuum', 'purged', 'dry', 'atmospheric'), server_default=sa.text("'vacuum'"), nullable=True),
    sa.Column('type_of_recording', sa.Enum('fourier transform', 'dispersive', 'tunable laser'), server_default=sa.text("'fourier transform'"), nullable=True),
    sa.Column('mode_of_recording', sa.Enum('transmission', 'ATR', 'transflectance', 'diffuse reflection'), server_default=sa.text("'transmission'"), nullable=True),
    sa.ForeignKeyConstraint(['spectrometer_ID'], ['atr.spectrometer_ID'], name=op.f('fk_spectrometer_spectrometer_ID_atr')),
    sa.ForeignKeyConstraint(['spectrometer_ID'], ['not_atr.spectrometer_ID'], name=op.f('fk_spectrometer_spectrometer_ID_not_atr')),
    sa.PrimaryKeyConstraint('spectrometer_ID', name=op.f('pk_spectrometer'))
    )
    op.create_table('experiment',
    sa.Column('experiment_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('experiment_description', sa.String(length=100), nullable=True),
    sa.Column('related_samples', sa.String(length=100), nullable=True),
    sa.Column('spectrometer_type_ID', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('depositor_ID', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('spectrometer_ID', mysql.INTEGER(display_width=11), nullable=True),
    sa.ForeignKeyConstraint(['depositor_ID'], ['depositor.depositor_ID'], name=op.f('fk_experiment_depositor_ID_depositor')),
    sa.ForeignKeyConstraint(['experiment_ID'], ['data_aquisition.experiment_ID'], name=op.f('fk_experiment_experiment_ID_data_aquisition')),
    sa.ForeignKeyConstraint(['spectrometer_ID'], ['spectrometer.spectrometer_ID'], name=op.f('fk_experiment_spectrometer_ID_spectrometer')),
    sa.PrimaryKeyConstraint('experiment_ID', name=op.f('pk_experiment'))
    )
    op.create_index(op.f('ix_experiment_depositor_ID'), 'experiment', ['depositor_ID'], unique=False)
    op.create_index(op.f('ix_experiment_spectrometer_ID'), 'experiment', ['spectrometer_ID'], unique=False)
    op.create_table('state_of_sample',
    sa.Column('state', sa.Enum('gas', 'solid', 'dried film', 'liquid'), nullable=False),
    sa.Column('sample_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('temperature_degrees', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('pressure_PSI', mysql.INTEGER(display_width=11), nullable=True),
    sa.ForeignKeyConstraint(['sample_ID'], ['liquid.sample_ID'], name=op.f('fk_state_of_sample_sample_ID_liquid')),
    sa.ForeignKeyConstraint(['sample_ID'], ['sample.sample_ID'], name=op.f('fk_state_of_sample_sample_ID_sample')),
    sa.PrimaryKeyConstraint('sample_ID', name=op.f('pk_state_of_sample'))
    )
    op.create_index(op.f('ix_state_of_sample_sample_ID'), 'state_of_sample', ['sample_ID'], unique=False)
    op.create_table('dried_film',
    sa.Column('atmosphere', sa.String(length=45), nullable=True),
    sa.Column('solution_ composition', sa.String(length=45), nullable=True),
    sa.Column('concentration', sa.String(length=45), nullable=True),
    sa.Column('volume', sa.String(length=45), nullable=True),
    sa.Column('area', sa.String(length=45), nullable=True),
    sa.Column('solvent', sa.String(length=45), nullable=True),
    sa.Column('pH', sa.String(length=45), server_default=sa.text("'RANGE(0,14)'"), nullable=True),
    sa.Column('sample_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['sample_ID'], ['state_of_sample.sample_ID'], name=op.f('fk_dried_film_sample_ID_state_of_sample')),
    sa.PrimaryKeyConstraint('sample_ID', name=op.f('pk_dried_film'))
    )
    op.create_index(op.f('ix_dried_film_sample_ID'), 'dried_film', ['sample_ID'], unique=False)
    op.create_table('experimental_conditions',
    sa.Column('experiment_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('phase', sa.String(length=45), nullable=True),
    sa.Column('temperatue', sa.String(length=45), nullable=True),
    sa.Column('pressure', sa.String(length=45), nullable=True),
    sa.ForeignKeyConstraint(['experiment_ID'], ['experiment.experiment_ID'], name=op.f('fk_experimental_conditions_experiment_ID_experiment')),
    sa.PrimaryKeyConstraint('experiment_ID', name=op.f('pk_experimental_conditions'))
    )
    op.create_table('gas',
    sa.Column('atmosphere', sa.String(length=45), nullable=True),
    sa.Column('water_vapour', sa.String(length=45), nullable=True),
    sa.Column('state_of_sample_sample_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['state_of_sample_sample_ID'], ['state_of_sample.sample_ID'], name=op.f('fk_gas_state_of_sample_sample_ID_state_of_sample')),
    sa.PrimaryKeyConstraint('state_of_sample_sample_ID', name=op.f('pk_gas'))
    )
    op.create_index(op.f('ix_gas_state_of_sample_sample_ID'), 'gas', ['state_of_sample_sample_ID'], unique=False)
    op.create_table('project_has_experiment',
    sa.Column('project_ID', mysql.INTEGER(display_width=11), nullable=True),
    sa.Column('experiment_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['experiment_ID'], ['experiment.experiment_ID'], name=op.f('fk_project_has_experiment_experiment_ID_experiment')),
    sa.ForeignKeyConstraint(['project_ID'], ['project.project_ID'], name=op.f('fk_project_has_experiment_project_ID_project')),
    sa.PrimaryKeyConstraint('experiment_ID', name=op.f('pk_project_has_experiment'))
    )
    op.create_index(op.f('ix_project_has_experiment_project_ID'), 'project_has_experiment', ['project_ID'], unique=False)
    op.create_table('publication_has_experiment',
    sa.Column('publication_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('experiment_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['experiment_ID'], ['experiment.experiment_ID'], name=op.f('fk_publication_has_experiment_experiment_ID_experiment')),
    sa.ForeignKeyConstraint(['publication_ID'], ['publication.publication_ID'], name=op.f('fk_publication_has_experiment_publication_ID_publication'))
    )
    op.create_index(op.f('ix_publication_has_experiment_experiment_ID'), 'publication_has_experiment', ['experiment_ID'], unique=False)
    op.create_index(op.f('ix_publication_has_experiment_publication_ID'), 'publication_has_experiment', ['publication_ID'], unique=False)
    op.create_table('solid',
    sa.Column('crystal_form', sa.String(length=45), nullable=True),
    sa.Column('chemical_formula', sa.String(length=45), nullable=True),
    sa.Column('sample_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['sample_ID'], ['state_of_sample.sample_ID'], name=op.f('fk_solid_sample_ID_state_of_sample')),
    sa.PrimaryKeyConstraint('sample_ID', name=op.f('pk_solid'))
    )
    op.create_index(op.f('ix_solid_sample_ID'), 'solid', ['sample_ID'], unique=False)
    op.create_table('spectra',
    sa.Column('spectra_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('spectra_type', sa.Enum('sample power', 'background power spectrum', 'initial result spectrum'), nullable=True),
    sa.Column('format', sa.Enum('absorbance', 'transmittance', 'reflectance', 'log reflectance', 'kubelka munk', 'ATR spectrum', 'pas spectrum'), nullable=True),
    sa.Column('experiment_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.ForeignKeyConstraint(['experiment_ID'], ['experiment.experiment_ID'], name=op.f('fk_spectra_experiment_ID_experiment')),
    sa.PrimaryKeyConstraint('spectra_ID', 'experiment_ID', name=op.f('pk_spectra'))
    )
    op.create_index(op.f('ix_spectra_experiment_ID'), 'spectra', ['experiment_ID'], unique=False)
    op.create_table('post_processing_and_deposited_spectra',
    sa.Column('sample_power_spectrum', sa.String(length=45), nullable=True),
    sa.Column('background_power_spectrum', sa.String(length=45), nullable=True),
    sa.Column('initial_result_spectrum', sa.String(length=45), nullable=True),
    sa.Column('initial result spectrum format', sa.Enum('Blackman-Harris 3-Term', 'Blackman-Harris 5-Term', 'Norton-Beer,weak', 'Norton-Beer,medium', 'Norton-Beer,strong', 'Boxcar', 'Triangular', 'Four point', 'other'), nullable=True),
    sa.Column('water vapour', sa.String(length=45), nullable=True),
    sa.Column('solvent', sa.String(length=45), nullable=True),
    sa.Column('solution_composition_item_1', sa.String(length=45), nullable=True),
    sa.Column('solution_composition_item_2', sa.String(length=45), nullable=True),
    sa.Column('other', sa.String(length=45), nullable=True),
    sa.Column('baseline_correction', sa.String(length=45), nullable=True),
    sa.Column('scaling', sa.String(length=45), nullable=True),
    sa.Column('2nd_derivative', sa.Enum('y', 'n'), nullable=True),
    sa.Column('method', sa.String(length=45), nullable=True),
    sa.Column('window_point_size/smoothing', sa.String(length=45), nullable=True),
    sa.Column('final_published_spectrum', sa.String(length=45), nullable=True),
    sa.Column('final_published_spectrum_format', sa.Enum('absorbance', 'transmittance', 'reflectance', 'log reflectance', 'Kubelka Munk', 'ATR spectrum', 'PAS spectrum'), nullable=True),
    sa.Column('smoothing_method', sa.String(length=45), nullable=True),
    sa.Column('smooth_parameters', sa.String(length=45), nullable=True),
    sa.Column('spectra_ID', mysql.INTEGER(display_width=11), nullable=False),
    sa.Column('post_processing_and_deposited_spectracol', sa.String(length=45), nullable=True),
    sa.ForeignKeyConstraint(['spectra_ID'], ['spectra.spectra_ID'], name=op.f('fk_post_processing_and_deposited_spectra_spectra_ID_spectra')),
    sa.PrimaryKeyConstraint('spectra_ID', name=op.f('pk_post_processing_and_deposited_spectra'))
    )
    op.create_index(op.f('ix_post_processing_and_deposited_spectra_spectra_ID'), 'post_processing_and_deposited_spectra', ['spectra_ID'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_post_processing_and_deposited_spectra_spectra_ID'), table_name='post_processing_and_deposited_spectra')
    op.drop_table('post_processing_and_deposited_spectra')
    op.drop_index(op.f('ix_spectra_experiment_ID'), table_name='spectra')
    op.drop_table('spectra')
    op.drop_index(op.f('ix_solid_sample_ID'), table_name='solid')
    op.drop_table('solid')
    op.drop_index(op.f('ix_publication_has_experiment_publication_ID'), table_name='publication_has_experiment')
    op.drop_index(op.f('ix_publication_has_experiment_experiment_ID'), table_name='publication_has_experiment')
    op.drop_table('publication_has_experiment')
    op.drop_index(op.f('ix_project_has_experiment_project_ID'), table_name='project_has_experiment')
    op.drop_table('project_has_experiment')
    op.drop_index(op.f('ix_gas_state_of_sample_sample_ID'), table_name='gas')
    op.drop_table('gas')
    op.drop_table('experimental_conditions')
    op.drop_index(op.f('ix_dried_film_sample_ID'), table_name='dried_film')
    op.drop_table('dried_film')
    op.drop_index(op.f('ix_state_of_sample_sample_ID'), table_name='state_of_sample')
    op.drop_table('state_of_sample')
    op.drop_index(op.f('ix_experiment_spectrometer_ID'), table_name='experiment')
    op.drop_index(op.f('ix_experiment_depositor_ID'), table_name='experiment')
    op.drop_table('experiment')
    op.drop_table('spectrometer')
    op.drop_index(op.f('ix_sample_molecular_composition_ID'), table_name='sample')
    op.drop_table('sample')
    op.drop_index(op.f('ix_protein_molecule_ID'), table_name='protein')
    op.drop_table('protein')
    op.drop_index(op.f('ix_molecule_has_molecular_composition_molecule_ID'), table_name='molecule_has_molecular_composition')
    op.drop_table('molecule_has_molecular_composition')
    op.drop_index(op.f('ix_data_aquisition_Fourier transform processing_FTIRDBID'), table_name='data_aquisition')
    op.drop_table('data_aquisition')
    op.drop_index(op.f('ix_chemicals_molecule_ID'), table_name='chemicals')
    op.drop_table('chemicals')
    op.drop_table('users')
    op.drop_table('publication')
    op.drop_table('project')
    op.drop_table('not_atr')
    op.drop_table('molecule')
    op.drop_table('molecular_composition')
    op.drop_table('liquid')
    op.drop_table('fourier_transform_processing')
    op.drop_table('depositor')
    op.drop_table('atr')
    op.drop_table('Spectra_detail')
    op.drop_table('Spectra')
    op.drop_table('Graph_experiment')
    op.drop_table('FTIRModel')
    # ### end Alembic commands ###
